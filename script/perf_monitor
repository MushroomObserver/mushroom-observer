#!/usr/bin/env ruby
#
#  USAGE::
#
#    script/perf_monitor <mushroomobserver.org> <upload.jpg> <output_dir> <1000>
#
#  DESCRIPTION::
#
#  Hammer a server with a bunch of requests for observations, names and images.
#  Also tests upload speed every 100 times.
#
################################################################################

require "fileutils"

IMAGES       = [*1..41_000 / 500].map { |n| n * 500 }
NAMES        = [*1..16_000 / 500].map { |n| n * 500 }
OBSERVATIONS = [*1..19_500 / 500].map { |n| n * 500 }

SITE       = ARGV[0]
IMAGE_FILE = ARGV[1]
LOG_PATH   = ARGV[2]
NUMBER     = ARGV[3].to_i

def get_time
  Time.now.strftime("%Y-%m-%d.%H.%M.%S")
end

LOG_DIR = "#{LOG_PATH}/#{get_time}".freeze

FileUtils.mkpath("#{LOG_DIR}/observer")
FileUtils.mkpath("#{LOG_DIR}/image")
FileUtils.mkpath("#{LOG_DIR}/name")

curl = Class.new do
  def initialize
    @log_file = File.open("#{LOG_PATH}/perf.log", "a")
    at_exit { @log_file.close }
  end

  def run(page, args = {})
    id, image_file = args.values_at(:id, :image_file)
    @log_file.write("#{page}:#{get_time}: ")
    cmd = "curl"
    if image_file
      if File.exist?(image_file)
        cmd << " -F \"file=@#{image_file}\""
      else
        puts "Unable to find the image file: #{image_file}"
        @log_file.write("ERROR\n")
        return
      end
    end
    url = "https://#{SITE}/#{page}"
    url << "/#{id}" if id
    puts url
    cmd << " #{url} -o #{LOG_DIR}/#{page} -s -i"
    start = Time.now
    if system(cmd)
      @log_file.write("#{Time.now - start}\n")
    else
      @log_file.write("ERROR\n")
    end
  end
end.new

count = 0
NUMBER.times do
  curl.run("/")
  curl.run("images", id: IMAGES.sample)
  curl.run("names", id: NAMES.sample)
  curl.run("observations", id: OBSERVATIONS.sample)
  if count % 100 == 0
    curl.run("image/test_upload_speed", image_file: IMAGE_FILE)
  end
  count += 1
end

exit 0
