#!/usr/bin/env bash
#
#  Get listings of all local and remote image files, transfer ones that need
#  to be transferred, and delete ones that are no longer needed locally.
#
################################################################################
set -e

source $(dirname "$0")/bash_include
source $(dirname "$0")/bash_images
tempfile=/tmp/verify_images.$$

USE_CACHE=0
SAFE_MODE=0
VERBOSE=0

for arg in "$@"; do
  case $arg in
  -c|--use-cache)
    USE_CACHE=1
    ;;
  -s|--safe)
    SAFE_MODE=1
    ;;
  -v|--verbose)
    VERBOSE=1
    ;;
  *)
    cat <<-END && exit 1

USAGE
  script/verify_images [-c|s|v or --use-cache|safe|verbose]

OPTIONS
  -c | --use_cache
  -s | --safe
  -v | --verbose

DESCRIPTION
  Gets listings of the size of all image files stored locally and on the image
  servers.  Uploads any that are different than the local copy.  Deletes local
  copies of any image files which have been transferred successfully.

END
  esac
done

################################################################################

function verbose {
  (( ! $VERBOSE )) || echo "$*"
}

function cache_file {
  server=$1
  echo $image_root/$server.files
}

function refresh_cache {
  server=$1
  file=$(cache_file $server)
  rm -f $file
  touch $file
  for subdir in ${image_subdirs[@]}; do
    if image_server_has_subdir $server $subdir; then
      verbose "Listing $server $subdir"
      read_server_directory $server $subdir | \
        sort | sed "s/^/$subdir\//" >> $file
    fi
  done
}

function delete_files {
  while read file; do
    verbose "Deleting $file"
    (( $SAFE_MODE )) || rm "$image_root/$file"
  done
}

function upload_files {
  server=$1
  while read file; do
    verbose "Uploading $file to $server"
    (( $SAFE_MODE )) || copy_file_to_server $server $file
  done
}

function local_files_that_dont_match {
  server=$1
  subdir=$2
  grep "^$subdir" $(cache_file local)   > $tempfile.1 || true
  grep "^$subdir" $(cache_file $server) > $tempfile.2 || true
  # (prints lines unique to first file)
  comm -23 $tempfile.1 $tempfile.2 | cut -f1
}

function local_files_we_no_longer_need {
  subdir=$1
  if start_with_local_files $subdir; then
    if subtract_files_with_differences_on_any_server $subdir; then
      cut -f1 $tempfile.1
    fi
  fi
}

function start_with_local_files {
  subdir=$1
  grep "^$subdir" $(cache_file local) > $tempfile.1
}

function subtract_files_with_differences_on_any_server {
  subdir=$1
  any_servers=0
  for server in ${image_servers[@]}; do
    if image_server_has_subdir $server $subdir; then
      subtract_files_with_differences $server $subdir
      any_servers=1
    fi
  done
  (( $any_servers )) && true || false
}

function subtract_files_with_differences {
  server=$1
  subdir=$2
  grep "^$subdir" $(cache_file $server) > $tempfile.2 || true
  # (remove lines with differences)
  comm -12 $tempfile.1 $tempfile.2 > $tempfile.3
  mv -f $tempfile.3 $tempfile.1
}

################################################################################

if (( ! $USE_CACHE )); then
  for server in local ${image_servers[@]}; do
    refresh_cache $server
  done
fi

for subdir in ${image_subdirs[@]}; do
  for server in ${image_servers[@]}; do
    if image_server_has_subdir $server $subdir; then
      local_files_that_dont_match $server $subdir | upload_files $server
    fi
  done
done

keep=$( rails_constant MO.keep_these_image_sizes_local )
for subdir in ${image_subdirs[@]}; do
  if !( echo $keep | grep -q ${subdir_to_size[$subdir]} ); then
    local_files_we_no_longer_need $subdir | delete_files
  fi
done

rm -f $tempfile.*
exit 0
