#!/usr/bin/env perl
use strict;

# In seconds.
my $TIME_THRESHOLD = 1000;
my $DB_THRESHOLD   = 750;

my $START = `date -d "1 hour ago" "+%Y-%m-%dT%H:%M:%S"`;
my $END   = `date "+%Y-%m-%dT%H:%M:%S"`;

my %BLOCKED;
my %DATA;
my %hash;
while (<>) {
  chomp;
  my ($time, $pid) = ($1, $2) if /^.. .(\d+-\d+-\d+T\d+:\d+:\d+.\d+) #(\d+)/;
  $hash{$pid}{'time'} = $time;
  if (/INFO -- : Started ([A-Z]+) "(.*)" for (\d+\.\d+\.\d+\.\d+)/) {
    if ($hash{$pid}) {
      if ($hash{$pid}{'time'} ge $START &&
          $hash{$pid}{'time'} lt $END) {
        push(@{$DATA{$hash{$pid}{'ip'}}}, $hash{$pid})
      }
      delete $hash{$pid};
    }
    $hash{$pid}{'method'} = $1;
    $hash{$pid}{'url'} = $2;
    $hash{$pid}{'ip'}  = $3;
  } elsif (/INFO -- : Processing by (\S+)/) {
    $hash{$pid}{'action'} = $1;
  } elsif (/WARN -- : user=(\d+)robot=(.)/) {
    $hash{$pid}{'user'}  = $1;
    $hash{$pid}{'robot'} = $2;
  } elsif (/WARN -- : TIME: (\S+)/) {
    $hash{$pid}{'total'} = $1;
    my $ua = $_;
    $ua =~ s/.*\t//;
    $hash{$pid}{'ua'} = $ua;
  } elsif (/INFO -- : Completed .* ([\d\.]+)ms .*Views: ([\d\.]+)ms .*ActiveRecord: ([\d\.]+)ms/) {
    $hash{$pid}{'total'} = $1 / 1000;
    $hash{$pid}{'views'} = $2 / 1000;
    $hash{$pid}{'db'}    = $3 / 1000;
    if ($hash{$pid}{'time'} ge $START &&
        $hash{$pid}{'time'} lt $END) {
      push(@{$DATA{$hash{$pid}{'ip'}}}, $hash{$pid})
    }
    delete $hash{$pid};
  } elsif (/BLOCKED (\d+\.\d+\.\d+\.\d+)/) {
    $BLOCKED{$1}++;
  }
}

# Sum total time of each IP's requests, so we can sort the output by that.
my %time;
foreach my $ip (keys %DATA) {
  my $time;
  foreach (@{$DATA{$ip}}) {
    $time += $$_{'total'};
  }
  $time{$ip} = $time;
}

my @ERRORS;
foreach my $ip (sort { $time{$b} <=> $time{$a} } keys %DATA) {

  # Gather stats for this IP.
  my $list = $DATA{$ip};
  my $num  = @$list;
  my ($time, $db, %ua, %user, %robot);
  foreach (@$list) {
    $time += $$_{'total'};
    $db   += $$_{'db'};
    $ua{$$_{'ua'}}++;
    $user{$$_{'user'}}++;
    $robot{$$_{'robot'}}++;
  }
  next if $time < $TIME_THRESHOLD && $db < $DB_THRESHOLD;

  # Show overall stats for this IP.
  my $ua    = (sort { $ua{$b} <=> $ua{$a} } keys %ua)[0];
  my $user  = (sort { $user{$b} <=> $user{$a} } keys %user)[0];
  my $robot = (sort { $robot{$b} <=> $robot{$a} } keys %robot)[0];
  $ua    = 'various'   if $ua{$ua} < $num / 2;
  $user  = 'various'   if $user{$user} < $num / 2;
  $robot = 'various'   if $robot{$robot} < $num / 2;
  $ua    = 'Googlebot' if $ua =~ /Googlebot/;
  $time  = int($time + 0.5);
  $db    = int($db   + 0.5);
  push(@ERRORS, "$ip num=$num total=${time} db=${db} user=$user robot=$robot ".
                "ua=$ua\n");
  push(@ERRORS, "\n"), next if $ua eq 'Googlebot';

  # Show most expensive queries made by this IP.
  my $i = 0;
  foreach ((sort {
            $$b{'time'} + $$b{'db'} <=> $$a{'time'} + $$a{'db'}
           } @$list)) {
    push(@ERRORS, "  $$_{'method'} $$_{'url'} total=$$_{'total'} db=$$_{'db'} ".
                  "views=$$_{'views'}\n");
    last if ++$i == 10;
  }
  push(@ERRORS, "\n");

  # Add IP to block list.
  print "$ip\n";
  delete $BLOCKED{$ip};
}

# Only show errors if something other than Googlebot there.
print STDERR @ERRORS if @ERRORS > 5;

# Continue blocking an IP as long as they make requests.  Once on the blocked
# IP list, their requests will no longer be expensive, and therefore will no
# longer surpass the threshold.  This would result in them being removed from
# the blocked IP list even though they may still trying to make bad requests.
foreach my $ip (sort keys %BLOCKED) {
  print "$ip\n";
}

exit 0;
