#!/usr/bin/env ruby
# frozen_string_literal: true

#
#  Read width and height of JPEG image from header.  (ImageMagick loads the
#  entire image into memory!)
#
################################################################################

# ------------------------------------
#  Grab dimensions from JPEG header.
# ------------------------------------

def get_size(file)
  w = h = nil
  File.open(file) do |fh|
    x = fh.sysread(2).unpack1("n")
    if x != 0xFFD8
      warn("#{file}: not jpeg")
      break
    end
    baseline_dct_or_progressive_dct = [0xFFC0, 0xFFC2].freeze
    while (str = fh.sysread(4))
      x, l = str.unpack("nn")
      if baseline_dct_or_progressive_dct.include?(x)
        h, w = fh.sysread(5).unpack("xnn")
        break
      # elsif x < 0xFF00
      #   $stderr.puts('Invalid header!')
      #   exit 1
      else
        fh.sysseek(l - 2, IO::SEEK_CUR)
      end
    end
  end
  [w, h]
end

# ----------------------------
#  Main program.
# ----------------------------

case ARGV[0]

# Help message
when "-h", "--help"
# Fall through to display help.

# Given file of files.
when "-f", "--file"
  file = ARGV[1]
  any = false
  File.readlines(file).each do |line|
    file2 = line.chomp
    w, h = get_size(file2)
    if w
      $stdout.puts("#{file2}: #{w} #{h}")
      any = true
    end
  end
  exit(any ? 0 : 1)

# Just given single filename.
else
  if (ARGV.length == 1) && !ARGV[0].start_with?("-")
    file = ARGV[0]
    w, h = get_size(file)
    if w
      $stdout.puts("#{w} #{h}")
      exit(0)
    else
      exit(1)
    end
  end
end

# Help message whenever screw up command line.
warn(%(
  USAGE
    script/jpegsize <file>.jpg
    script/jpegsize -f <file_list.txt>

  DESCRIPTION
    Reports the size of one or more JPEG files.

  OPTIONS
    -h --help             Print this message.
    -f --file <file>      Report size of all files listed in <file>.

))

exit(1)
