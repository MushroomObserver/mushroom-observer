#!/usr/bin/env bash
#
#  Rotate and reprocess an image.
#
################################################################################
set -e

id=$1
op=$2

source $(dirname "$0")/bash_include
source $(dirname "$0")/bash_images

orig_file=$image_root/orig/$id.jpg

if [[ $1 == "-h" || $1 == "--help" ]]; then cat <<END; exit 1; fi

USAGE
  script/rotate_image <id> <0|+90|-90|180|-h|-v>

DESCRIPTION
  This grabs the original image from the image server if it's already
  been moved, rotates or flips the original as requested, updates the
  database, then transfers execution to script/process_image.  It aborts at
  the first sign of trouble. 

OPERATIONS
  0     No transformation, just reprocess the image.
  -90   Rotate counterclockwise 90 degrees.
  +90   Rotate clockwise 90 degrees.
  180   Rotate 180 degrees.
  -h    Flip horizontally.
  -v    Flip vertically.

END

# Get fresh copy of original image if we need to.
if [[ ! -e $orig_file ]]; then
  for server in ${image_servers[0]}; do
    if image_server_has_subdir $server orig; then
      copy_file_from_server $server orig/$id.jpg
      break
    fi
  done
fi

# First make sure the Orientation tag has been correctly cleared.  This should
# already be the case, but some old images with screwy EXIF headers were not
# being cleared correctly, and this should fix them.
orientation=`exiftool -n -Orientation $orig_file | sed 's/.*: //'`
if test "$orientation" != "1" -a "$orientation" != "" ; then
  exiftool -n -overwrite_original -Orientation=1 "$orig_file" || \
    exiftool -n -overwrite_original -all= -tagsfromfile @ -all:all -unsafe -icc_profile "$orig_file" && \
    exiftool -n -overwrite_original -Orientation=1 "$orig_file"
fi

# Transform image.
wait_for "(convert|jpegresize)"
case $op in
"-90")
  convert $orig_file -rotate 270 $orig_file.new || die "Failed to rotate $orig_file."
  mv -f $orig_file.new $orig_file               || die "Failed to move $orig_file.new into place."
  ;;
"+90")
  convert $orig_file -rotate 90 $orig_file.new  || die "Failed to rotate $orig_file."
  mv -f $orig_file.new $orig_file               || die "Failed to move $orig_file.new into place."
  ;;
"180")
  convert $orig_file -rotate 180 $orig_file.new || die "Failed to rotate $orig_file."
  mv -f $orig_file.new $orig_file               || die "Failed to move $orig_file.new into place."
  ;;
"-h")
  convert $orig_file -flop $orig_file.new  || die "Failed to rotate $orig_file."
  mv -f $orig_file.new $orig_file          || die "Failed to move $orig_file.new into place."
  ;;
"-v")
  convert $orig_file -flip $orig_file.new  || die "Failed to rotate $orig_file."
  mv -f $orig_file.new $orig_file          || die "Failed to move $orig_file.new into place."
  ;;
esac

# Update size and clear "transferred" bit in database.
size=$( $app_root/script/jpegsize $orig_file )
w=$( echo $size | sed "s/ .*//" )
h=$( echo $size | sed "s/.* //" )
run_mysql "UPDATE images SET transferred=FALSE, width=$w, height=$h WHERE id=$id" || warn "Failed to update database: $id should be $w x $h."

# Transfer control to process_image.
exec $app_root/script/process_image $id jpg 0
