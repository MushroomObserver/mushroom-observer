#!/bin/bash
#
#  Create the various resized copies of the given original image and transfer
#  them to the image server(s).
#
################################################################################
set -e

id=$1
ext=$2
set_size=$3
strip_gps=$4

source $(dirname "$0")/bash_include
source $(dirname "$0")/bash_images
keep_cumulative_log

raw_file=$image_root/orig/$id.$ext
full_file=$image_root/orig/$id.jpg
huge_file=$image_root/1280/$id.jpg
large_file=$image_root/960/$id.jpg
medium_file=$image_root/640/$id.jpg
small_file=$image_root/320/$id.jpg
thumb_file=$image_root/thumb/$id.jpg

if [[ $1 == "-h" || $1 == "--help" ]]; then cat <<END; exit 1; fi

USAGE
  script/process_image <id> <extension> <set_size_in_database?> <strip_gps?>

DESCRIPTION
  This is used by the webserver to resize and transfer uploaded images to
  the image server(s).  It is intended to run asynchronously.  One of these
  jobs is spwaned for each image uploaded.  It takes these steps:

  1. convert original to jpeg if necessary
  2. reorient it correctly if necessary
  3. set size of original image in database if 'set' flag used
  4. create the five smaller-sized copies
  5. copy all files to the image server(s) if in production mode
  6. email webmaster if there were any errors

  It ensures that no other processes are running ImageMagick or scp before
  it runs its own commands.  If another is running, it sleep a few seconds
  and tries again.

END

# Convert the original image to a JPEG.
if [[ $ext != "jpg" ]]; then
  wait_for "(convert|jpegresize)"
  log_cmd convert -quality 90 $raw_file $full_file

  # If there are multiple layers, ImageMagick saves them as 1234-N.jpg.
  # Take the first one, and delete the rest.
  if [[ ! -e $full_file ]]; then
    biggest_layer=$( ls -rS $image_root/orig/$id-*.jpg | tail -1 )
    if [[ -e $biggest_layer ]]; then
      log_cmd mv $biggest_layer $full_file
      log_cmd rm $image_root/orig/$id-*.jpg
    fi
  fi

  # Strip GPS out of header if hiding coordinates.
  if (( $strip_gps )); then
    exiftool -gps:all= -xmp:geotag= -overwrite_original -q $raw_file
  fi
fi

# Strip GPS out of header if hiding coordinates.
if (( $strip_gps )); then
  exiftool -gps:all= -xmp:geotag= -overwrite_original -q $full_file
fi

# Make sure image is oriented correctly.
log_cmd exifautotran $full_file

if (( $set_size )); then
  size=$( $app_root/script/jpegsize $full_file )
  w=$( echo $size | sed "s/ .*//" )
  h=$( echo $size | sed "s/.* //" )
  log_mysql "UPDATE images SET width=$w, height=$h WHERE id=$id" || true
fi

# Image processing theory says that reducing images by 50% at a time is optimal.
wait_for "(convert|jpegresize)"
# log_cmd jpegresize 1280x1280 -q 93 --max-size $full_file $huge_file
# log_cmd jpegresize 960x960   -q 94 --max-size $full_file $large_file
# log_cmd jpegresize 640x640   -q 95 --max-size $huge_file $medium_file
# log_cmd jpegresize 320x320   -q 95 --max-size $medium_file $small_file
# log_cmd jpegresize 160x160   -q 95 --max-size $small_file $thumb_file

# ImageMagick slurps the entire image into memory all at once.
# Our jpegresize is much more memory-efficient but otherwise equivalent.
log_cmd convert -thumbnail "1280x1280>" -quality 93 $full_file $huge_file
log_cmd convert -thumbnail "960x960>"   -quality 94 $huge_file $large_file
log_cmd convert -thumbnail "640x640>"   -quality 95 $huge_file $medium_file
log_cmd convert -thumbnail "320x320>"   -quality 95 $medium_file $small_file
log_cmd convert -thumbnail "160x160>"   -quality 95 $small_file $thumb_file

transferred_any=0
if (( !$development )); then
  for server in ${image_servers[@]}; do
    subdirs=${image_server_data[$server,subdirs]}
    for subdir in thumb 320 640 960 1280 orig; do
      if ( echo $subdirs | grep -q $subdir ); then
        log_cmd copy_file_to_server $server $subdir/$id.jpg
      fi
    done
    if [[ $ext != "jpg" ]]; then
      if ( echo $subdirs | grep -q orig ); then
        log_cmd copy_file_to_server $server orig/$id.$ext
      fi
    fi
    transferred_any=1
  done
fi

if (( !$development && !$errors && $transferred_any )); then
  log_mysql "UPDATE images SET transferred=TRUE WHERE id=$id"
fi

if (( !$development && $errors )); then
  send_mail -s "[MO] process_image" $webmaster_email < $log_file 
fi

exit $errors
