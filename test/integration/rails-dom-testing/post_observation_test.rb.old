  # ------------------------------------------------------
  #  Test posting, editing, and destroying observations.
  #
  #  General plan:
  #    login
  #    create_observation
  #    create_location
  #    edit_observation
  #    destroy_observation
  #
  #  Variables:
  #    katrina, rolf  - integration test sessions
  #    katrina       - User instance
  #    @expectations  - set of objects to compare against in evaluate_xxx() methods
  #
  #  Methods added to sessions by the "constructor" regular_user():
  #    login_required - get page, assert redirect to login, login, assert redirect to page
  #    fills_in_form  - check starting values, make any changes, upload any images, return new values
  #    evaluate_xxx   - just assertions: checks state at various stages
  # ------------------------------------------------------

  def test_posting_observation_rewrite
    @expectations = {
      :observation => observations(:amateur_observation),
      :image => images(:amateur_image),
      :location => locations(:burbank),
      :vote => votes(:amateur_vote)
    }
    katrina = regular_user(@expectations)
    katrina.login_required(katrina, 'observer/create_observation')

    observation_fields = katrina.fills_in_form(observation_form_defaults, observation_form_no_location)
    katrina.evaluate_no_location

    observation_fields = katrina.fills_in_form(observation_fields, observation_form_location,
      [['image_0_image', "#{RAILS_ROOT}/test/images/Coprinus_comatus.jpg"]])
    katrina.evaluate_new_location_observation

    katrina.fills_in_form(location_form_defaults)
    katrina.evaluate_new_location
    katrina.evaluate_show_observation

    katrina.click(:label => /edit observation/i)
    katrina.fills_in_form(edit_observation_form_defaults(katrina.new_observation), observation_form_change_location)
    katrina.evaluate_change_location

    rolf = regular_user(@expectations)
    rolf.get('/')
    rolf.evaluate_observation_on_index

    katrina.click(:label => /destroy/i, :href => /destroy_observation/)
    katrina.evaluate_destruction

    rolf.get('/')
    rolf.evaluate_orphan
  end

  def regular_user(expectations)
    open_session do |sess|
      def sess.set_expectations(expectations)
        @expectations = expectations
      end
      sess.set_expectations(expectations)

      def sess.login_required(user, page)
        get(page)
        assert_template('account/login')
        login!(user)
        assert_template(page)
      end

      def sess.reload_results
        @new_observation = Observation.last
        @new_image = Image.last
        @new_location = Location.last
      end

      def sess.new_observation
        @new_observation
      end

      def sess.fills_in_form(expected, new_values={}, images=[])
        open_form do |form|
          for key, value in expected
            form.assert_value(key, value)
          end
          for key, value in new_values
            form.change(key, value)
          end
          setup_image_dirs
          for id, filename in images
            form.upload(id, filename, 'image/jpeg')
          end
          form.submit
        end
        expected.merge(new_values)
      end

      def sess.evaluate_observation_on_index
        reload_results
        assert_select("a[href^=/#{@new_observation.id}?]", :minimum => 1)
      end

      def sess.evaluate_destruction
        assert_flash_text(/destroyed/i)
        assert_template('observer/list_observations')
      end

      def sess.evaluate_orphan
        assert_select("a[href^=/#{@new_observation.id}?]", 0)
        assert_select('a[href*=show_rss_log]') do |elems|
          assert(elems.any? {|e| e.to_s.match(/deleted.*item/mi)} )
        end
      end

      def sess.evaluate_no_location
        assert_template('observer/create_observation')
        assert_flash_text(/where|location/i)
      end

      def sess.evaluate_new_location_observation
        assert_flash_text(/success/i)
        assert_flash_text(/uploaded/i)
        assert_flash_text(/created observation/i)
        assert_flash_text(/created proposed name/i)
        assert_template('location/create_location')

        reload_results
        assert_users_equal(@expectations[:observation].user, @new_observation.user)
        assert(@new_observation.created > Time.now - 1.minute)
        assert(@new_observation.updated_at > Time.now - 1.minute)
        assert_dates_equal(@expectations[:observation].when, @new_observation.when)
        assert_equal(@expectations[:observation].where, @new_observation.where)
        assert_nil(@new_observation.location)
        assert_gps_equal(@new_observation.lat, @expectations[:observation].lat)
        assert_gps_equal(@new_observation.long, @expectations[:observation].long)
        assert_names_equal(@expectations[:observation].name, @new_observation.name)
        assert_equal(@expectations[:observation].is_collection_location, @new_observation.is_collection_location)
        assert_equal(@expectations[:observation].specimen, @new_observation.specimen)
        assert_equal(@expectations[:observation].notes, @new_observation.notes)
        assert_obj_list_equal([@new_image], @new_observation.images)
        assert_dates_equal(@expectations[:image].when, @new_image.when)
        assert_equal(@expectations[:image].copyright_holder, @new_image.copyright_holder)
        assert_equal(@expectations[:image].notes, @new_image.notes)
        assert(assigns(:location))
      end

      def sess.evaluate_new_location
        assert_flash_text(/success/i)
        assert_flash_text(/created location/i)
        assert_template('observer/show_observation')

        reload_results
        assert_equal(@expectations[:observation].where, @new_location.name)
        assert_equal(@new_observation.location_id, @new_location.id)
        assert_match(EXPECTED_PASADENA_GPS['location_north'], @new_location.north.to_s)
        assert_match(EXPECTED_PASADENA_GPS['location_west'], @new_location.west.to_s)
        assert_match(EXPECTED_PASADENA_GPS['location_east'], @new_location.east.to_s)
        assert_match(EXPECTED_PASADENA_GPS['location_south'], @new_location.south.to_s)
      end

      def sess.evaluate_show_observation
        # Make sure important bits show up somewhere on page.
        assert_match(@new_observation.when.web_date, response.body)
        for token in @new_observation.location.name.split(', ') # USA ends up as <span class=\"caps\">USA</span>, so just search for each component
          assert_match(token, response.body)
        end
        assert_match(:show_observation_seen_at.l, response.body)
        assert_match(/specimen available/, response.body)
        assert_match(@new_observation.notes, response.body)
        assert_match(@new_image.notes, response.body)
        assert_select('a[href*=observations_at_where]', 0)
        assert_select('a[href*=show_location]', 1)
        assert_select('a[href*=show_image]')
      end

      def sess.evaluate_change_location
        assert_flash_success
        assert_template('observer/show_observation')

        reload_results
        assert_objs_equal(@expectations[:location], @new_observation.location)
        assert_equal(@expectations[:location].display_name, @new_observation.place_name)
        assert_select('a[href*=observations_at_where]', 0)
        assert_select('a[href*=show_location]', 1)
      end
    end
  end

  def observation_form_defaults
    local_now = Time.now.in_time_zone
    {
      'observation_when_1i' => local_now.year,
      'observation_when_2i' => local_now.month,
      'observation_when_3i' => local_now.day,
      'observation_place_name' => '',
      'observation_lat' => '',
      'observation_long' => '',
      'name_name' => '',
      'is_collection_location' => true,
      'specimen' => false,
      'observation_notes' => ''
    }
  end

  def observation_form_no_location
    {
      'observation_when_1i' => @expectations[:observation].when.year,
      'observation_when_2i' => @expectations[:observation].when.month,
      'observation_when_3i' => @expectations[:observation].when.day,
      'is_collection_location' => @expectations[:observation].is_collection_location,
      'specimen' => @expectations[:observation].specimen,
      'observation_notes' => @expectations[:observation].notes
    }
  end

  def observation_form_location
    {
      'observation_place_name' => @expectations[:observation].where,
      'observation_lat' => @expectations[:observation].lat,
      'observation_long'=> @expectations[:observation].long,
      'name_name' => ' ' + @expectations[:observation].name.text_name + ' ',
      'vote_value' => @expectations[:vote].value,
      'image_0_when_1i' => @expectations[:image].when.year,
      'image_0_when_2i' => @expectations[:image].when.month,
      'image_0_when_3i' => @expectations[:image].when.day,
      'image_0_copyright_holder' => @expectations[:image].copyright_holder,
      'image_0_notes' => @expectations[:image].notes,
    }
  end

  # Can't make this a fixture since it would then match the location name 'Pasadena, California, USA'
  # All these need to be patterns to match the strings returned by the Google Map API.
  # Note that these tests only work when you have a working Internet connection.

  def location_form_defaults
    {
      'location_display_name' => @expectations[:observation].where,
      'location_high' => '',
      'location_low' => '',
      'location_notes' => ''
    }.merge(EXPECTED_PASADENA_GPS)
  end

  def edit_observation_form_defaults(new_observation)
    {
      'observation_when_1i' => new_observation.when.year,
      'observation_when_2i' => new_observation.when.month,
      'observation_when_3i' => new_observation.when.day,
      'observation_place_name' => new_observation.place_name,
      'observation_lat' => /#{new_observation.lat}/,
      'observation_long' => /#{new_observation.long}/,
      'is_collection_location' => new_observation.is_collection_location,
      'specimen' => new_observation.specimen,
      'observation_notes' => new_observation.notes
    }
  end

  IMAGE_NOTE_ADDITION = "Isn't it grand?"

  def observation_form_change_location
    {
      'observation_place_name' => @expectations[:location].display_name,
    }
  end
