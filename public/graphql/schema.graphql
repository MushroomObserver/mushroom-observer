type ApiKey {
  createdAt: ISO8601DateTime
  id: Int!
  key: String!
  lastUsed: ISO8601DateTime
  notes: String
  numUses: Int
  user: User!
  userId: Int!
  verified: ISO8601DateTime
}

type Article {
  body: String
  createdAt: ISO8601DateTime!
  id: Int!
  rssLog: RssLog
  rssLogId: Int
  title: String
  updatedAt: ISO8601DateTime!
  user: User
  userId: Int
}

type CollectionNumber {
  createdAt: ISO8601DateTime
  id: Int!
  name: String
  number: String
  observations: [Observation!]
  updatedAt: ISO8601DateTime
  user: User
  userId: Int
}

type Comment {
  comment: String
  createdAt: ISO8601DateTime
  id: Int!
  summary: String
  target: InterestTarget!
  targetId: Int
  targetType: String
  updatedAt: ISO8601DateTime
  user: User
  userId: Int
}

type CopyrightChange {
  id: Int!
  license: License
  licenseId: Int
  name: String
  targetId: Int!
  targetType: String!
  updatedAt: ISO8601DateTime!
  user: User!
  userId: Int!
  year: Int
}

"""
Autogenerated return type of Delete
"""
type DeletePayload {
  user: User!
}

type Donation {
  amount: Float
  anonymous: Boolean!
  createdAt: ISO8601DateTime
  email: String
  id: Int!
  recurring: Boolean
  reviewed: Boolean!
  updatedAt: ISO8601DateTime
  user: User
  userId: Int
  who: String
}

type ExternalLink {
  createdAt: ISO8601DateTime
  externalSite: ExternalSite
  externalSiteId: Int
  id: Int!
  observation: Observation
  observationId: Int
  updatedAt: ISO8601DateTime
  url: String
  user: User
  userId: Int
}

type ExternalSite {
  externalLinks: [ExternalLink!]
  id: Int!
  name: String
  project: Project
  projectId: Int
}

"""
Fields filtering an Observations query
"""
input FilterObservationsInput {
  before: Boolean
  locationLike: String
  nameId: Int
  nameLike: String
  notesLike: String
  order: Order
  orderBy: OrderBy
  userId: Int
  userLike: String
  when: ISO8601Date
  withImage: Boolean
  withLichen: Boolean
  withSpecimen: Boolean
}

type GlossaryTerm {
  createdAt: ISO8601DateTime
  description: String
  id: Int!
  images: [Image!]
  imgSrcFull: String
  imgSrcHuge: String
  imgSrcLg: String
  imgSrcMed: String
  imgSrcSm: String
  imgSrcThumb: String
  name: String
  rssLog: RssLog
  rssLogId: Int
  thumbImage: Image
  thumbImageId: Int
  updatedAt: ISO8601DateTime
  user: User
  userId: Int
  version: Int
}

type Herbarium {
  code: String!
  createdAt: ISO8601DateTime
  curators: [User!]
  description: String
  email: String!
  herbariumRecords: [HerbariumRecord!]
  id: Int!
  location: Location
  locationId: Int
  mailingAddress: String
  name: String
  personalUser: User
  personalUserId: Int
  updatedAt: ISO8601DateTime
}

"""
The connection type for Herbarium.
"""
type HerbariumConnection {
  """
  A list of edges.
  """
  edges: [HerbariumEdge]

  """
  A list of nodes.
  """
  nodes: [Herbarium]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type HerbariumEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Herbarium
}

type HerbariumRecord {
  accessionNumber: String!
  createdAt: ISO8601DateTime
  herbarium: Herbarium!
  herbariumId: Int!
  id: Int!
  initialDet: String!
  notes: String
  observations: [Observation!]
  updatedAt: ISO8601DateTime
  user: User!
  userId: Int!
}

"""
An ISO 8601-encoded date
"""
scalar ISO8601Date

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

type Image {
  bestGlossaryTerms: [GlossaryTerm!]
  contentType: String
  copyrightChanges: [CopyrightChange!]
  copyrightHolder: String
  createdAt: ISO8601DateTime
  glossaryTerms: [GlossaryTerm!]
  gpsStripped: Boolean!
  height: Int
  id: Int!
  imageVotes: [Vote!]
  imgSrcFull: String
  imgSrcHuge: String
  imgSrcLg: String
  imgSrcMed: String
  imgSrcSm: String
  imgSrcThumb: String
  lastView: ISO8601DateTime
  license: License!
  licenseId: Int!
  notes: String
  numViews: Int!
  observations: [Observation!]
  okForExport: Boolean!
  originalName: String
  projects: [Project!]
  reviewer: User
  subjects: [User!]
  thumbClients: [Observation!]
  transferred: Boolean!
  updatedAt: ISO8601DateTime
  user: User
  userId: Int
  voteCache: Float
  when: ISO8601Date
  width: Int
}

type Interest {
  id: Int!
  state: Boolean
  target: InterestTarget
  targetId: Int
  targetType: String
  updatedAt: ISO8601DateTime
  user: User
  userId: Int
}

"""
Targets of an Interest
"""
union InterestTarget = Location | Name | Observation | Project | SpeciesList

type License {
  deprecated: Boolean!
  displayName: String
  formName: String
  id: Int!
  images: [Image!]
  locationDescriptions: [LocationDescription!]
  nameDescriptions: [NameDescription!]
  updatedAt: ISO8601DateTime
  url: String
  users: [User!]
}

type Location {
  comments: [Comment!]
  createdAt: ISO8601DateTime
  description: LocationDescription
  descriptionId: Int
  descriptions: [LocationDescription!]
  east: Float
  herbaria: [Herbarium!]
  high: Float
  id: Int!
  interests: [Interest!]
  lastView: ISO8601DateTime
  locked: Boolean!
  low: Float
  name: String
  north: Float
  notes: String
  numViews: Int
  observations: [Observation!]
  okForExport: Boolean!
  rssLog: RssLog
  rssLogId: Int
  scientificName: String
  south: Float
  speciesLists: [SpeciesList!]
  updatedAt: ISO8601DateTime
  user: User
  userId: Int
  users: [User!]
  version: Int
  west: Float
}

type LocationDescription {
  adminGroups: [UserGroup!]
  authors: [User!]
  comments: [Comment!]
  createdAt: ISO8601DateTime
  ecology: String
  editors: [User!]
  genDesc: String
  id: ID!
  interests: [User!]
  lastView: ISO8601DateTime
  license: License
  licenseId: Int
  locale: String
  location: Location
  locationId: Int
  mergeSourceId: Int
  notes: String
  numViews: Int
  okForExport: Boolean!
  project: Project
  projectId: Int
  public: Boolean
  readerGroups: [UserGroup!]
  refs: String
  sourceName: String
  sourceType: Int
  species: String
  updatedAt: ISO8601DateTime
  user: User
  userId: Int
  version: Int
  writerGroups: [UserGroup!]
}

"""
Autogenerated return type of Login
"""
type LoginPayload {
  token: String
  user: User
}

"""
Credentials necessary for user login
"""
input LoginUserInput {
  login: String!
  password: String!
  rememberMe: Boolean
}

type Mutation {
  """
  Sign up a new user
  """
  userCreate: User

  """
  Delete a user
  """
  userDelete(id: Int!): DeletePayload

  """
  Login a user
  """
  userLogin(input: LoginUserInput!): LoginPayload

  """
  Update user profile
  """
  userUpdate: User
}

type Name {
  author: String
  citation: String
  classification: String
  comments: [Comment!]
  correctSpelling: Name
  correctSpellingId: Int
  createdAt: ISO8601DateTime
  deprecated: Boolean!
  description: NameDescription
  descriptionId: Int
  descriptions: [NameDescription!]
  displayName: String
  formatName: String
  icnId: Int
  id: Int!
  interests: [Interest!]
  lastView: ISO8601DateTime
  lifeform: String!
  locked: Boolean!
  misspellings: [Name!]
  namings: [Naming!]
  notes: String
  numViews: Int
  observations: [Observation!]
  okForExport: Boolean!
  rank: Int
  rssLog: RssLog
  rssLogId: Int
  searchName: String
  sortName: String
  synonym: Name
  synonymId: Int
  textName: String
  updatedAt: ISO8601DateTime
  user: User
  userId: Int
  version: Int
}

type NameDescription {
  adminGroups: [UserGroup!]
  authors: [User!]
  classification: String
  comments: [Comment!]
  createdAt: ISO8601DateTime
  diagDesc: String
  distribution: String
  editors: [User!]
  genDesc: String
  habitat: String
  id: ID!
  interests: [User!]
  lastReview: ISO8601DateTime
  lastView: ISO8601DateTime
  license: License
  licenseId: Int
  locale: String
  lookAlikes: String
  mergeSourceId: Int
  name: Name
  nameId: Int
  notes: String
  numViews: Int
  okForExport: Boolean!
  project: Project
  projectId: Int
  public: Boolean
  readerGroups: [UserGroup!]
  refs: String
  reviewStatus: Int
  reviewer: User
  reviewerId: Int
  sourceName: String
  sourceType: Int
  updatedAt: ISO8601DateTime
  userId: Int
  uses: String
  version: Int
  writerGroups: [UserGroup!]
}

type Naming {
  createdAt: ISO8601DateTime
  id: Int!
  name: Name
  nameId: Int
  observation: Observation
  observationId: Int
  reasons: String
  updatedAt: ISO8601DateTime
  user: User
  userId: Int
  voteCache: Float
  votes: [Vote!]
}

type Notification {
  flavor: Int
  id: Int!
  noteTemplate: String
  objId: Int
  requireSpecimen: Boolean!
  updatedAt: ISO8601DateTime
  user: User!
  userId: Int!
}

type Observation {
  alt: Int
  classification: String
  collectionNumbers: [CollectionNumber!]
  comments: [Comment!]
  createdAt: ISO8601DateTime
  externalLinks: [ExternalLink!]
  gpsHidden: Boolean!
  herbariumRecords: [HerbariumRecord!]
  id: Int!
  images: [Image!]
  imgSrcFull: String
  imgSrcHuge: String
  imgSrcLg: String
  imgSrcMed: String
  imgSrcSm: String
  imgSrcThumb: String
  interests: [Interest!]
  isCollectionLocation: Boolean!
  lastView: ISO8601DateTime
  lat: Float
  lifeform: String
  location: Location
  locationId: Int
  long: Float
  name: Name
  nameId: Int
  namings: [Naming!]
  notes: String
  numViews: Int!
  observationViews: [ObservationView!]
  projects: [Project!]
  rssLog: RssLog
  rssLogId: Int
  sequences: [Sequence!]
  speciesLists: [SpeciesList!]
  specimen: Boolean!
  textName: String
  thumbImage: Image
  thumbImageId: Int
  updatedAt: ISO8601DateTime
  user: User
  userId: Int
  viewers: [User!]
  voteCache: Float
  votes: [Vote!]
  when: ISO8601Date
  where: String
}

"""
The connection type for Observation.
"""
type ObservationConnection {
  """
  A list of edges.
  """
  edges: [ObservationEdge]

  """
  A list of nodes.
  """
  nodes: [Observation]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type ObservationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Observation
}

type ObservationView {
  id: Int!
  lastView: ISO8601DateTime
  observation: Observation
  observationId: Int
  user: User
  userId: Int
}

enum Order {
  """
  Ascending
  """
  ASC

  """
  Descending
  """
  DESC
}

enum OrderBy {
  """
  When created
  """
  CREATED_AT

  """
  Current name
  """
  TEXT_NAME

  """
  When updated
  """
  UPDATED_AT

  """
  When observed
  """
  WHEN
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Project {
  adminGroup: UserGroup!
  adminGroupId: Int!
  comments: [Comment!]
  createdAt: ISO8601DateTime
  id: Int!
  images: [Image!]
  interests: [Interest!]
  observations: [Observation!]
  rssLog: RssLog
  rssLogId: Int
  speciesLists: [SpeciesList!]
  summary: String
  title: String!
  updatedAt: ISO8601DateTime
  user: User!
  userGroup: UserGroup!
  userGroupId: Int!
  userId: Int!
}

type Publication {
  createdAt: ISO8601DateTime
  full: String
  howHelped: String
  id: Int!
  link: String
  moMentioned: Boolean
  peerReviewed: Boolean
  updatedAt: ISO8601DateTime
  user: User
  userId: Int
}

type Query {
  """
  get article by id
  """
  article(id: Int!): Article!

  """
  list all articles
  """
  articles: [Article!]!
  herbaria(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): HerbariumConnection

  """
  get herbarium by id
  """
  herbarium(id: Int!): Herbarium!

  """
  get location by id
  """
  location(id: Int!): Location!

  """
  list all locations
  """
  locations: [Location!]!

  """
  get observation by id
  """
  observation(id: Int!): Observation!

  """
  List or filter all observations
  """
  observations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: FilterObservationsInput

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ObservationConnection!

  """
  An example field added by the generator
  """
  testField: String!

  """
  get user by id
  """
  user(id: Int): User!

  """
  list all users
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!
}

type RssLog {
  article: Article
  articleId: Int
  detail: String
  glossaryTerm: GlossaryTerm
  glossaryTermId: Int
  id: Int!
  location: Location
  locationId: Int
  name: Name
  nameId: Int
  notes: String
  observation: Observation
  observationId: Int
  parseLog: String
  project: Project
  projectId: Int
  speciesList: SpeciesList
  speciesListId: Int
  updatedAt: ISO8601DateTime
}

type Sequence {
  accession: String
  archive: String
  bases: String
  createdAt: ISO8601DateTime!
  id: Int!
  locus: String
  notes: String
  observation: Observation
  observationId: Int
  updatedAt: ISO8601DateTime!
  user: User
  userId: Int
}

type SpeciesList {
  comments: [Comment!]
  createdAt: ISO8601DateTime
  id: Int!
  interests: [Interest!]
  location: Location
  locationId: Int
  notes: String
  observations: [Observation!]
  projects: [Project!]
  rssLog: RssLog
  rssLogId: Int
  title: String
  updatedAt: ISO8601DateTime
  user: User
  userId: Int
  when: ISO8601Date
  where: String
}

type User {
  admin: Boolean
  alert: String
  apiKeys: [ApiKey!]
  authCode: String
  authoredLocations: [LocationDescription!]
  authoredNames: [NameDescription!]
  bonuses: String
  comments: [Comment!]
  contentFilter: String
  contribution: Int
  createdAt: ISO8601DateTime
  curatedHerbaria: [Herbarium!]
  defaultRssType: String
  donations: [Donation!]
  editedLocations: [LocationDescription!]
  editedNames: [NameDescription!]
  email: String!
  emailCommentsAll: Boolean!
  emailCommentsOwner: Boolean!
  emailCommentsResponse: Boolean!
  emailGeneralCommercial: Boolean!
  emailGeneralFeature: Boolean!
  emailGeneralQuestion: Boolean!
  emailHtml: Boolean!
  emailLocationsAdmin: Boolean
  emailLocationsAll: Boolean!
  emailLocationsAuthor: Boolean!
  emailLocationsEditor: Boolean!
  emailNamesAdmin: Boolean
  emailNamesAll: Boolean!
  emailNamesAuthor: Boolean!
  emailNamesEditor: Boolean!
  emailNamesReviewer: Boolean!
  emailObservationsAll: Boolean!
  emailObservationsConsensus: Boolean!
  emailObservationsNaming: Boolean!
  externalLinks: [ExternalLink!]
  herbariumRecords: [HerbariumRecord!]
  hideAuthors: Int!
  id: Int!
  image: Image
  imageId: Int
  imageSize: Int
  images: [Image!]
  imgSrcFull: String
  imgSrcHuge: String
  imgSrcLg: String
  imgSrcMed: String
  imgSrcSm: String
  imgSrcThumb: String
  interests: [Interest!]
  keepFilenames: Int!
  lastActivity: ISO8601DateTime
  lastLogin: ISO8601DateTime
  layoutCount: Int
  license: License!
  licenseId: Int!
  locale: String
  location: Location
  locationDescriptions: [LocationDescription!]
  locationFormat: Int
  locationId: Int
  locations: [Location!]
  login: String!
  mailingAddress: String
  name: String
  nameDescriptions: [NameDescription!]
  names: [Name!]
  namings: [Naming!]
  notes: String
  notesTemplate: String
  notifications: [Notification!]
  observations: [Observation!]
  password: String!
  projectsCreated: [Project!]
  publications: [Publication!]
  reviewedImages: [Image!]
  reviewedNameDescriptions: [NameDescription!]
  sequences: [Sequence!]
  speciesLists: [SpeciesList!]
  theme: String
  thumbnailMaps: Boolean!
  thumbnailSize: Int
  updatedAt: ISO8601DateTime
  userGroups: [UserGroup!]
  verified: ISO8601DateTime
  viewOwnerId: Boolean!
  votes: [Vote!]
  votesAnonymous: Int
}

"""
The connection type for User.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: User
}

type UserGroup {
  adminProject: Project
  createdAt: ISO8601DateTime
  id: Int!
  meta: Boolean
  name: String!
  project: Project
  updatedAt: ISO8601DateTime
  users: [User!]
}

type Vote {
  createdAt: ISO8601DateTime
  favorite: Boolean
  id: Int!
  naming: Naming
  namingId: Int
  observation: Observation
  observationId: Int
  updatedAt: ISO8601DateTime
  user: User
  userId: Int
  value: Float
}
