<%=
# TODO: make this a component
# Required args: images:
# Optional args:
#   object: (the carousel is usually for an object)
#   top_img: (defaults to first), (carousel)title:, (image_edit)links:
#   thumbnails: true for thumbnail navigation
#   size: arg for ImagePresenter
#   html_id: for carousel div
#   links: button links for heading
#
# Note: uses concat(x) instead of [x,y].safe_join because of conditionals

images ||= object&.images || nil #
object ||= nil #
size ||= :large
top_img ||= images.first #
title ||= :IMAGES.t #
links ||= "" #
# thumbnails = true if thumbnails.nil? #
type = object&.type_tag || "image" #
html_id ||= "#{type}_#{object.id}_carousel" #

concat(carousel_heading(title, links)) if thumbnails
if !images.nil? && images.any?
  tag.div(class: "carousel slide edit-carousel", id: html_id,
          data: { ride: "false", interval: "false" }) do
    concat(tag.div(class: "carousel-inner bg-light", role: "listbox") do
      images.each do |image|
        concat(render(partial: "shared/edit_carousel_item",
                      locals: { image:, size:, top_img:, object: }))
      end
      # carousel-control-wrap needs to only occupy the image part of each item
      #   w-100 and padding-bottom: 50% on mobile
      #   w-50 and padding-bottom: 50% on tablet
      concat(tag.div(class: "carousel-control-wrap ab-fab") do
        tag.div(class: "image-position") do
          concat(carousel_controls(html_id)) if images.length > 1
          concat(tag.ol(class: "carousel-indicators") do
            images.each_with_index do |_image, index|
              tag.li("", class: class_names("carousel-indicator", active),
                        data: { target: "##{html_id}", slide_to: index.to_s })
            end
          end)
        end
      end)
    end)
  end
end
%>
