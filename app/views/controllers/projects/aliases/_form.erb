<%
  if local_assigns[:form_locals]
    project_alias = form_locals[:project_alias]
  end
  container_class(:text)
  type = (project_alias.target_type || :location).downcase.to_sym
  value = project_alias.target&.format_name || ""
  form_args = { model: project_alias,
                data: { controller: :autocompleter, type: } }
  if local_assigns[:local] == true
    form_args = form_args.merge({ local: true })
  else
    form_args = form_args.deep_merge({ data: { turbo: true } })
  end
%>
<%= form_with(**form_args) do |form| %>
  <% if project_alias.errors.any? %>
    <div id="error_explanation" class="alert alert-danger">
      <h2><%= pluralize(project_alias.errors.count, "error") %> prohibited this project alias from being saved:</h2>
      <ul>
        <% project_alias.errors.full_messages.each do |message| %>
          <li><%= message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <%= text_field_with_label(form:, field: :name, label: "#{:Name.t}:", inline: true) %>
  <%= form.hidden_field(:project_id, value: project_alias.project_id) %>

  <%= tag.div(class: "form-group dropdown",
              data: { autocompleter_target: "wrap" } ) do %>
    <%= select_with_label(form:,
                          field: :target_type,
                          label: "#{:project_alias_type.t}:",
                          options: [[:USER.l, :user], [:LOCATION.l, :location]],
                          inline: true,
                          selected: type,
                          data: { autocompleter_target: "select",
                                  action: "autocompleter#swap" }) %>

    <%= autocompleter_hidden_field(form:, type:, hidden_value: project_alias.target_id) %>
    <%= form.text_field(
      :term, value:, class: "form-control",
      data: { autocompleter_target: "input" }
    ) %>
    <%= autocompleter_dropdown %>
  <% end %>

  <%= submit_button(form:, button: form_submit_text(@project_alias), class: "mb-5") %>
<% end %>
