<%# filter for identify observations index %>
<%# Replaces the usual pattern_search form in the top nav %>

<%# TODO: make the form input have selects with autocomplete that send the ID %>
<%# Otherwise the records have to be looked up (several times) %>

<%
# Show the incoming `needs_id` query in the search bar if there has been one
filter_type = params.dig(:filter, :type) || false
selected = filter_type ? filter_type.to_sym : :clade
value = filter_type ? params.dig(:filter, :term) : ""
placeholder = "Filter by:"
options = [
  [:CLADE.l, :clade],
  [:REGION.l, :region],
  # [:USER.l, :user],
]
%>

<%= form_with(url: identify_observations_path, method: :get,
              class: "navbar-form navbar-left", scope: :filter,
              id: "identify_filter") do |f| %>

  <div class="form-group has-feedback has-search">
    <%= content_tag(:span, "", class: "glyphicon glyphicon-search " \
                                      "form-control-feedback") %>
    <%# f.label(:term, "Filter by:") %>
    <%= f.text_field(:term,
                      # turn off browser autocomplete
                      autocomplete: "off", value: value,
                      placeholder: placeholder,
                      class: "form-control", size: 42,
                      data: { autofocus: true }) %>
  </div><!--.form-group-->

  <%= f.select(:type, options, { selected: selected },
               { class: "form-control",
                 onchange: "MOEvents.rebindAutoComplete(this.value);" }) %>

  <%= f.submit(:SEARCH.l, class: "btn btn-default") %>

  <%= f.submit(:CLEAR.l, class: "btn btn-default") %>

  <% turn_into_clade_auto_completer(:filter_term) %>

  <% # initializes module with translations for js messages
  inject_javascript_at_end %(
    $("#filter_term").on("change", function() {
      MOEvents.rebindAutoComplete(this.value)
    })
  ) %>

<% end %>
