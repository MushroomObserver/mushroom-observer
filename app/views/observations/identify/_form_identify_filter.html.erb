<%# bs4 filter for identify observations index %>
<%# Replaces the usual pattern_search form in the top nav %>

<%# TODO: make the form input have selects with autocomplete that send the ID %>
<%# Otherwise the records have to be looked up (several times) %>

<%
# Show the incoming `needs_id` query in the search bar if there has been one
filter_type = params.dig(:filter, :type) || false
selected = filter_type ? filter_type.to_sym : :clade
value = filter_type ? params.dig(:filter, :term) : ""
placeholder = "Filter by:"
filter_types = [
  [:CLADE.l, :clade],
  [:REGION.l, :region],
  # [:USER.l, :user],
]
search_icon = content_tag(:i, class: "fa-solid fa-magnifying-glass fa-lg") do
                content_tag(:span, :SEARCH.l, class: "sr-only")
              end
clear_icon = content_tag(:i, class: "fa-solid fa-delete-left fa-lg") do
               content_tag(:span, :CLEAR.l, class: "sr-only")
             end
%>

<%= form_with(url: identify_observations_path, method: :get,
              class: "form-inline", scope: :filter,
              id: "identify_filter") do |f| %>

  <%= content_tag(:div, class: "input-group") do
    [f.text_field(:term,
                  # turn off browser autocomplete
                  autocomplete: "off", value: value,
                  placeholder: placeholder,
                  style: "flex-grow: 2;",
                  class: "form-control", size: 42,
                  data: { autofocus: true }),
     f.select(:type, filter_types, { selected: selected },
              { class: "form-control",
                onchange: "MOEvents.rebindAutoComplete(this.value);" }),
     content_tag(:div, class: "input-group-append") do
       [button_tag(type: :submit, value: :SEARCH.l,
                   class: "btn btn-outline-secondary") do
          search_icon
        end,
        button_tag(type: :submit, value: :CLEAR.l,
                   class: "btn btn-outline-secondary") do
          clear_icon
        end].safe_join
     end].safe_join
  end %>

  <% turn_into_clade_auto_completer(:filter_term) %>

  <% # initializes module with translations for js messages
  inject_javascript_at_end %(
    $("#filter_term").on("change", function() {
      MOEvents.rebindAutoComplete(this.value)
    })
  ) %>

<% end %>
