<%
  # Tricky bit of logic to determine what kind of email is being sent here.  If
  # sending comment to owner of object it is not a "response to their comment"
  # -- it is a "comment on their object".  Otherwise if the recipient has also
  # commented on the same object, then it is being sent because it is a
  # response to their comment.  We do not care about the recipient's interest
  # in the object: call it a response if it is a response so long as they are
  # not the owner.  Note, we need to be careful of order of causality: because
  # of queuing, things could get out of order.  For example: A comments, B
  # comments, then A's comment is sent to B.  It is important that B had not
  # yet commented at the time A commented.  This means B is being sent A's
  # comment not because it was a response, but because B is interested in the
  # object being commented on.  Is all this clear?  Sure isn't to me...
  # This is all important because we need to give the user the correct link
  # at the bottom of the email to turn off these sorts of emails.  Turning off
  # email_comments_response will not prevent owner from getting them; turning
  # off email_comments_owner will not prevent non-owner from getting them.
  # Interest confuses the whole issue, of course, since it overrides these
  # two prefs.
  is_owner = (@user == @target.user)
  recipients_comments = Comment.where(target_type: @comment.target_type,
                                      target_id: @comment.target_id,
                                      user_id: @user.id)
  comments_before_this_comment = recipients_comments.select do |c|
    c.created_at < @comment.created_at
  end
  is_response = (!is_owner && comments_before_this_comment.length > 0)

  watching = @user.watching?(@target)
  email_type = is_response ? "response" :
               is_owner    ? "owner"    : "all"

  intro = is_owner ?    :email_comment_intro_to_owner :
          is_response ? :email_comment_intro_response :
                        :email_comment_intro_other
  intro = intro.l(type: @target.type_tag, name: @target.unique_format_name)

  fields = ""
  fields += "*#{:Created.l}:* #{@comment.created_at.email_time}\n"
  fields += "*#{:By.l}:* #{@comment.user.legal_name} (#{@comment.user.login})\n" if @comment.user
  fields += "*#{:Summary.l}:* #{@comment.summary.to_s}\n"
  fields += "*#{:Comment.l}:*\n" if @comment.comment

  # Only give the owner of the object being commented on access to the email
  # address of the user who commented on it.
  handy_links = "*#{:email_no_respond.l}* #{:email_respond_via_comment.l}"
  handy_links.sub!(/\n*\Z/, "\n" + :email_handy_links.l)

  links = []
  links.push([:email_links_show_object.t(type: @target.type_tag),
    "#{MO.http_domain}#{@target.show_controller}/#{@target.show_action}/#{@target.id}"])
  links.push([:email_links_post_comment.t,
    "#{MO.http_domain}/comment/add_comment?id=#{@comment.target_id}&type=#{@comment.target_type}"])
  links.push([:email_links_not_interested.t(type: @target.type_tag),
    "#{MO.http_domain}/interest/set_interest?id=#{@comment.target_id}&type=#{@comment.target_type}&user=#{@user.id}&state=-1"])
  links.push([:email_links_stop_sending.t,
    "#{MO.http_domain}/account/no_email_comments_#{email_type}/#{@user.id}"]) unless watching
  links.push([:email_links_change_prefs.t,
    "#{MO.http_domain}/account/prefs/#{@user.id}"])
  links.push([:email_links_latest_changes.t,
    MO.http_domain])

  report_abuse = :email_report_abuse.l(email: MO.webmaster_email_address)

if @user.email_html %>
<html>
<head>
<title><%= "#{:app_title.t}: #{@title}" %></title>
</head>
<body topmargin=0 leftmargin=0 rightmargin=0 bottommargin=0><br/>
<%= intro.tp %>
<%= fields.tp %>
<% if @comment.comment %>
<div style='margin-left:20px; margin-right:20px; padding-left:20px; padding-right:20px; padding-top:10px; padding-bottom:10px; border:1px dotted; background:#E0E0E0; color:#000000;'>
<%= @comment.comment.tp %>
</div>
<% end %>
<%= handy_links.tp %>
<ul type=none>
<% links.each do |label, url| %>
<li><%= label %>: <%= link_to(url, url) %></li>
<% end %>
</ul>
<%= report_abuse.tp %>
<br/>
</body>
</html>
<% else %><%= intro.tp.html_to_ascii %>

<%= fields.tp.html_to_ascii %>

<%= @comment.comment ? @comment.comment.tp.html_to_ascii + "\n" : "" %>
--------------------------------------------------

<%= handy_links.tp.html_to_ascii %>

<%= result = "".html_safe
  links.each do |label, url|
    result += label.html_to_ascii + ": " + url.html_safe + "\n"
  end
  result %>
<%= report_abuse.tp.html_to_ascii %>
<% end %>
