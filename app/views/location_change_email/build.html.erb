<%
  new_loc = @loc_change.new_clone
  old_loc = @loc_change.old_clone
  new_desc = @desc_change.new_clone
  old_desc = @desc_change.old_clone
  watching = @user.watching?(new_loc)
  is_now = :email_field_is_now.l

  # Why is this user being notified?  If the base Location changed, then look
  # at all the LocationDescriptions, else only need to look at the
  # LocationDescription that actually changed.  If notifiable for multiple
  # reasons, choose the least restrictive -- i.e. 'all' first, then admin,
  # editor and lastly author.
  email_type = if @user.email_locations_all
    "all"
  elsif @user.watching?(new_loc)
    "interest"
  elsif new_loc.version != old_loc.version
    @user.email_locations_editor && new_loc.descriptions.any? {|d| d.editor?(@user)} ? "editor" :
    @user.email_locations_author && new_loc.descriptions.any? {|d| d.author?(@user)} ? "author" :
    @user.email_locations_admin  && new_loc.descriptions.any? {|d| d.is_admin?(@user)}  ? "admin"  : nil
  elsif new_desc
    @user.email_locations_editor && new_desc.editor?(@user) ? "editor" :
    @user.email_locations_author && new_desc.author?(@user) ? "author" :
    @user.email_locations_admin  && new_desc.is_admin?(@user)  ? "admin"  : nil
  else
    nil
  end

  intro = :email_object_change_intro.l(
    type: :location,
    name: "#{Location.user_name(@user, old_loc.name)} (#{new_loc.id})"
  )

  fields = ""
  fields += "*#{:Time.l}:* #{@time.email_time}\n"
  fields += "*#{:By.l}:* #{@sender.legal_name} (#{@sender.login})\n" if @sender

  license = new_desc ? new_desc.license : nil

  one_liners = ""
  one_liners += "*#{:Name.l} #{is_now}:* #{new_loc.display_name}\n"          if new_loc.name  != old_loc.name
  one_liners += "*#{:email_field_north.l} #{is_now}:* #{new_loc.north}\n"    if new_loc.north != old_loc.north
  one_liners += "*#{:email_field_south.l} #{is_now}:* #{new_loc.south}\n"    if new_loc.south != old_loc.south
  one_liners += "*#{:email_field_east.l} #{is_now}:* #{new_loc.east}\n"      if new_loc.east  != old_loc.east
  one_liners += "*#{:email_field_west.l} #{is_now}:* #{new_loc.west}\n"      if new_loc.west  != old_loc.west
  one_liners += "*#{:show_location_highest.l} #{is_now}:* #{new_loc.high}\n" if new_loc.high  != old_loc.high
  one_liners += "*#{:show_location_highest.l} #{is_now}:* #{new_loc.low}\n"  if new_loc.low   != old_loc.low
  one_liners += "*#{:license.l} #{is_now}:* #{license.display_name}\n"        if license && new_desc.license_id != old_desc.license_id

  many_liners = []
  if new_desc
    for field in LocationDescription.all_note_fields
      old_val = old_desc.send(field) rescue nil
      new_val = new_desc.send(field)
      many_liners.push([("form_locations_" + field.to_s).to_sym.t, new_val]) if new_val != old_val
    end
  end

  handy_links = :email_handy_links.l
  if email_type
    tag = :"email_object_change_reason_#{email_type}".to_sym
    handy_links = tag.l(type: :location).sub(/\n*\Z/, "\n" + handy_links)
  end

  links = []
  links.push([:email_links_show_object.t(type: :location),
    "#{MO.http_domain}/location/show_location/#{new_loc.id}"])
  links.push([:email_links_not_interested.t(type: :location),
    "#{MO.http_domain}/interest/set_interest?id=#{new_loc.id}&type=Location&user=#{@user.id}&state=-1"])
  if email_type && email_type != "interest"
    links.push([:email_links_stop_sending.t,
      "#{MO.http_domain}/account/no_email_locations_#{email_type}/#{@user.id}"]) unless watching
  end
  links.push([:email_links_change_prefs.t,
    "#{MO.http_domain}/account/prefs/#{@user.id}"])
  links.push([:email_links_latest_changes.t,
    MO.http_domain])

if @user.email_html %>
<html>
<head>
	<title><%= "#{:app_title.t}: #{@title}" %></title>
</head>
<body topmargin=0 leftmargin=0 rightmargin=0 bottommargin=0><br/>
<%= intro.tp %>
<%= fields.tp %>
<%= one_liners.tp if !one_liners.blank? %>
<% for var, val in many_liners %>
  <%= "*#{var} #{:email_field_is_now.l}:*".tp %>
  <div style='margin-left:20px; margin-right:20px; padding-left:20px; padding-right:20px; padding-top:10px; padding-bottom:10px; border:1px dotted; background:#E0E0E0; color:#000000;'>
    <%= val.tp %>
  </div>
<% end %>
<%= handy_links.tp %>
<ul type=none>
  <% for label, url in links %>
    <li><%= label %>: <%= link_to(url, url) %></li>
  <% end %>
</ul>
<br/>
</body>
</html>
<% else %><%= intro.tp.html_to_ascii %>

<%= fields.tp.html_to_ascii %>

<%= one_liners.tp.html_to_ascii if !one_liners.blank? %>
<% for var, val in many_liners %>

<%= "#{var} #{:email_field_is_now.l}:" %>
--------------------------------------------------
<%= val.tp.html_to_ascii %>
--------------------------------------------------
<% end %>

<%= handy_links.tp.html_to_ascii %>

<%= result = "".html_safe
  for label, url in links
    result += label.html_to_ascii + ": " + url.html_safe + "\n"
  end
  result %>
<% end %>
