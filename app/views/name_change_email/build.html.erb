<%
  new_name = @name_change.new_clone
  old_name = @name_change.old_clone
  new_desc = @desc_change.new_clone
  old_desc = @desc_change.old_clone

  watching = @user.watching?(new_name)
  is_now = :email_field_is_now.l

  # Why is this user being notified?  If the base Name changed, then look at
  # all the NameDescriptions, else only need to look at the NameDescription
  # that actually changed.  If notifiable for multiple reasons, choose the
  # least restrictive -- i.e. 'all' first, then admin, editor, author, and
  # lastly reviewer.
  email_type = if @user.email_names_all
    "all"
  elsif @user.watching?(new_name)
    "interest"
  elsif !old_name || new_name.version != old_name.version
    @user.email_names_editor   && new_name.descriptions.any? {|d| d.editor?(@user)} ? "editor"   :
    @user.email_names_author   && new_name.descriptions.any? {|d| d.author?(@user)} ? "author"   :
    @user.email_names_admin    && new_name.descriptions.any? {|d| d.is_admin?(@user)}  ? "admin"    :
    @user.email_names_reviewer && new_name.descriptions.any? {|d| d.reviewer == @user} ? "reviewer" : nil
  elsif new_desc
    @user.email_names_editor   && new_desc.editor?(@user) ? "editor"   :
    @user.email_names_author   && new_desc.author?(@user) ? "author"   :
    @user.email_names_admin    && new_desc.is_admin?(@user)  ? "admin"    :
    @user.email_names_reviewer && new_desc.reviewer == @user ? "reviewer" : nil
  else
    nil # ???
  end

  fields = ""
  fields += "*#{:Time.l}:* #{@time.email_time}\n"
  fields += "*#{:By.l}:* #{@sender.legal_name} (#{@sender.login})\n" if @sender

  one_liners = ""
  many_liners = []
  if old_name
    intro = :email_object_change_intro.l(
      type: :name,
      name: "#{old_name.display_name} (#{new_name.id})"
    )

    new_spell = new_name.correct_spelling ? new_name.correct_spelling.display_name : "--"
    license   = new_desc ? new_desc.license : nil

    one_liners += "*#{:Name.l} #{is_now}:* #{new_name.real_text_name}\n" if new_name.real_text_name != old_name.real_text_name
    one_liners += "*#{:Authority.l} #{is_now}:* #{new_name.author}\n"   if new_name.author     != old_name.author
    one_liners += "*#{:Citation.l} #{is_now}:* #{new_name.citation}\n"  if new_name.citation   != old_name.citation
    one_liners += "*#{:Rank.l} #{is_now}:* #{new_name.rank}\n"          if new_name.rank       != old_name.rank
    one_liners += "*#{:License.l} #{is_now}:* #{license.display_name}\n" if license && new_desc.license_id != old_desc.license_id
    one_liners += "*#{:Reviewed.l} #{is_now}:* #{@review_status}\n"      if @review_status       != :no_change
    one_liners += "*#{:Name.l} #{is_now}:* #{:Deprecated.l}\n"           if new_name.deprecated && !old_name.deprecated
    one_liners += "*#{:Status.l} #{is_now}:* #{:Accepted.l}\n"       if !new_name.deprecated && old_name.deprecated
    one_liners += "*#{:Status.l} #{is_now}:* #{:Misspelled.l}\n"     if !new_name.correct_spelling_id && !!old_name.correct_spelling_id
    one_liners += "*#{:Status.l} #{is_now}:* #{:Not_misspelled.l}\n" if !!new_name.correct_spelling_id && !old_name.correct_spelling_id
    one_liners += "*#{:Correct_spelling.l} #{is_now}:* #{new_spell} (#{new_name.correct_spelling_id}, #{old_name.correct_spelling_id})\n" if new_name.correct_spelling_id != old_name.correct_spelling_id

    if new_desc
      for field in NameDescription.all_note_fields
        old_val = old_desc.send(field) rescue nil
        new_val = new_desc.send(field)
        many_liners.push([("form_names_" + field.to_s).to_sym.t, new_val]) if new_val != old_val
      end
    end
  else
    intro = :email_object_new_intro.l(
      type: :name,
      name: "#{new_name.display_name} (#{new_name.id})"
    )
  end

  handy_links = :email_handy_links.l
  if email_type
    tag = :"email_object_change_reason_#{email_type}".to_sym
    handy_links = tag.l(type: :name).sub(/\n*\Z/, "\n" + handy_links)
  end

  links = []
  links.push([:email_links_show_object.t(type: :name),
    "#{MO.http_domain}/name/show_name/#{new_name.id}"])
  links.push([:email_links_not_interested.t(type: :name),
    "#{MO.http_domain}/interest/set_interest?id=#{new_name.id}&type=Name&user=#{@user.id}&state=-1"])
  if email_type && email_type != "interest"
    links.push([:email_links_stop_sending.t,
      "#{MO.http_domain}/account/no_email_names_#{email_type}/#{@user.id}"])
  end
  links.push([:email_links_change_prefs.t,
    "#{MO.http_domain}/account/prefs/#{@user.id}"])
  links.push([:email_links_latest_changes.t,
    MO.http_domain])

if @user.email_html %>
<html>
<head>
	<title><%= "#{:app_title.t}: #{@title}" %></title>
</head>
<body topmargin=0 leftmargin=0 rightmargin=0 bottommargin=0><br/>
<%= intro.tp %>
<%= fields.tp %>
<%= one_liners.tp if !one_liners.blank? %>
<% for var, val in many_liners %>
  <%= "*#{var} #{is_now}:*".tp %>
  <div style='margin-left:20px; margin-right:20px; padding-left:20px; padding-right:20px; padding-top:10px; padding-bottom:10px; border:1px dotted; background:#E0E0E0; color:#000000;'>
    <%= val.to_s.tp %>
  </div>
<% end %>
<%= handy_links.tp %>
<ul type=none>
  <% for label, url in links %>
    <li><%= label %>: <%= link_to(url, url) %></li>
  <% end %>
</ul>
<br/>
</body>
</html>
<% else %><%= intro.tp.html_to_ascii %>

<%= fields.tp.html_to_ascii %>

<%= one_liners.tp.html_to_ascii if !one_liners.blank? %>
<% for var, val in many_liners %>

<%= var + " " + is_now %>:
--------------------------------------------------
<%=
  val.to_s.tp.html_to_ascii
%>
--------------------------------------------------
<% end %>

<%= handy_links.tp.html_to_ascii %>

<%= result = "".html_safe
  for label, url in links
    result += label.html_to_ascii + ": " + url.html_safe + "\n"
  end
  result %>
<% end %>
