# you generally only need one nginx worker unless you're serving
# large amounts of static files which require blocking disk reads
worker_processes 1;

# drop privileges, root is needed on most systems for binding to port 80
# (or anything < 1024).  Capability-based security may be available for
# your system and worth checking out so you won't need to be root to
# start nginx to bind on 80
user vagrant vagrant;

pid /run/nginx.pid;
error_log /var/log/nginx/error.log;

events {
  worker_connections 1024; # increase if you have lots of clients
  accept_mutex off;        # "on" if nginx worker_processes > 1
  # use epoll;  # enable for Linux 2.6+
  # use kqueue; # enable for FreeBSD, OSX
}

http {
  # nginx will find this file in the config directory set at nginx build time
  include mime.types;

  # fallback in case we can't determine a type
  default_type application/octet-stream;

  access_log /var/log/nginx/access.log combined;
  error_log /var/log/nginx/error.log warn;
  log_format default '$remote_addr - $remote_user $time_local "$request" $status $body_bytes_sent';

  # serve static files with nginx
  sendfile on;

  # keep 1 Mb available to track uploads in the zone "upload"
  upload_progress upload 1m;

  tcp_nopush on;   # off may be better for *some* Comet/long-poll stuff
  tcp_nodelay off; # on may be better for some Comet/long-poll stuff

  # There are other gzip settings that may be needed used to deal with
  # bad clients out there, see http://wiki.nginx.org/NginxHttpGzipModule
  gzip on;
  gzip_http_version 1.0;
  gzip_proxied any;
  gzip_min_length 500;
  gzip_disable "MSIE [1-6]\.";
  gzip_types text/plain text/html text/xml text/css
             text/comma-separated-values
             text/javascript application/x-javascript
             application/atom+xml;

  upstream unicorn {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response (in case the Unicorn master nukes a
    # single worker for timing out)
    server unix:/tmp/unicorn.sock fail_timeout=0;
  }

  server {
    listen 3000 default deferred;
    server_name localhost;

    # this is equivalent of 10 max-sized images
    client_max_body_size 200M;

    # set read time out to way too long because of the eol.xml generation
    # and species list upload features that should both be done in the background
    proxy_read_timeout 300s;

    # time to keep connection alive to get attachments like images, css, etc.
    keepalive_timeout 10;

    # path for static files
    root /vagrant/mo/public;

    # prefer to serve static files directly from nginx
    try_files $uri @app;

    location @app {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;

      # enable this if you forward HTTPS traffic to unicorn
      # proxy_set_header X-Forwarded-Proto $scheme;

      # we don't want nginx trying to mess with redirects
      proxy_redirect off;

      # this is where unicorn is listening
      proxy_pass http://unicorn;

      # track progress of all POST requests at this location, MUST BE LAST!
      track_uploads upload 10s;
    }

    # hijack this URL and have it return the state of a current upload,
    # use header X-Progress-ID to identify the upload you're interested in
    location = /ajax/upload_progress {
      report_uploads upload;
    }

    # rails error pages
    error_page 500 502 503 504 /500.html;
    location = /500.html {
      root /vagrant/mo/public;
    }

    # serve assets directly from nginx, tell browsers to cache forever,
    # the new asset pipeline will take care of all that from now on
    location ^~ /assets/ {
      gzip_static on;
      expires     max;
      add_header  Cache-Control public;
      add_header  Last-Modified "";
      add_header  ETag "";
      break;
    }

    # serve all images from image server
    rewrite "^/images/(.*)/(.*)$" https://images.digitalmycology.com/$1/$2?;

    # serve non-thumbnails only from image server
    # rewrite "^/images/640/(.*)$" https://images.digitalmycology.com/640/$1?;
    # rewrite "^/images/960/(.*)$" https://images.digitalmycology.com/960/$1?;
    # rewrite "^/images/1280/(.*)$" https://images.digitalmycology.com/1280/$1?;
    # rewrite "^/images/orig/(.*)$" https://images.digitalmycology.com/orig/$1?;

    # Chris Parrish's site.
    rewrite "^/lichens/(.*)$" https://lichens.digitalmycology.com/$1?;
  }
}

